package cn.itcast.object;

class Person{

    int id;

    String name;



    public Person(int id,String name) {
        this.id = id;
        this.name=name;
    }
    //目前需要直接输出一个对象的时候，输出的格式：编号：110 姓名：狗娃
    //toString方法无法瞒住子类的需求，那么这时候我们就应该对Object的类的toString 进行重写


    public String toString(){
        return "编号"+this.id+"姓名"+this.name;
    }

    //Object的equals方法默认比较的是两个对象的内存的地址，目前需要比较的是两个对象的身份证，所以Object类的equals不符合现在的需求
    public boolean equals(Object obj){//obj指向了Person运用了多态的技术
        Person p = (Person)obj;//强制类型转换
        return this.id==p.id;
    }
    public int hashCode(){
        return this.id;
    }
}

public class Demo1 {
    public static void main(String []arg){
       /*
         Demo1 d = new Demo1();
         Object o = new Object();
         System.out.println("hashcode："+o.toString());
        System.out.println("hashcode："+o);

     Person p = new Person(110,"狗娃");
     System.out.println(p);
     //如果能输出一个p对象的时候，输出的格式是：编号：110 姓名：狗娃
        Person p1= new Person(111,"狗蛋");
        System.out.println(p1);
   */

       Person p = new Person(110,"狗娃");
       Person p2 = new Person(110,"陈大富");
       //需求：在现实生活中只要同一个人的身份证一致就是同一个人

        System.out.println("p与p2是同一个对象吗？"+p.equals(p2));//false
        System.out.println("p与p2是同一个对象吗？"+p.hashCode());
        System.out.println("p与p2是同一个对象吗？"+p2.hashCode());


    }
}


package cn.itcast.object;

import java.util.Arrays;

/*
   需求1：实现tirm()方法返回效果和tirm效果一样就是删除空格

   需求2：获取上传的文件名  思路找到最后一个\的索引值 然后在截取\后面的内容(索引值+1)就是文件名

   需求3：返回字符串中存储的字符反序  "狗的真是你"
   思路：先把字符串转换为字符，第一个下标和最后一个下标索引值，交换后，第一个索引值会+1，最后一个－1，直到开始索引值大于最后一个索引值，然后在将字符转换为字符串

   需求4：求一个子串在整串中出现的次数
   思路：step1.定义一个变量记录出现的次数
        step2.定义一个变量记录开始寻找的索引值


 */
public class Demo6 {
    public static void main(String[] arg) {
        String str = "  传智  博客  ";
        str = myTrim(str);
        System.out.println(str);

        str = "D:\\360downloads\\Demo1.java";
        getFilename(str);

        str = "狗的真是你";
        System.out.println("翻转的结果："+getReverse(str));

        str="abcjavaabcjavajavahp.java0";//求java在其中出现的次数
        System.out.println("出现的索引值"+str.indexOf("java",5));//从第五个开始找java
        Count(str,"a");
    }

    //需求四
    public static void Count(String str,String target){
       int count=0;//记录出现的次数
       int FromIndex=0;//记录从哪个索引值开始寻找目标子串

       while((FromIndex=str.indexOf(target,FromIndex))!=-1){
           //如果indexOf返回的不是-1那么就是已经找到了目标元素
           count++;
           //没找到一次formindex
           FromIndex+=target.length();
       }
       System.out.println(count);
    }





    //需求三：返回字符串中存储的字符反序
    public static String getReverse(String value) {
        char[] arr = value.toCharArray();
        for (int startIndex = 0, endIndex = arr.length - 1; startIndex < endIndex; startIndex++, endIndex--) {
            char temp = arr[startIndex];
            arr[startIndex] = arr[endIndex];
            arr[endIndex] = temp;
        }
        //使用字符数组构建字符串
        return new String(arr);
    }


    //需求二
    public static void getFilename(String path){
     /*
      因为文件名一般为最后一个/的后面的字符串
      int index=path.lastIndexOf("D");
      String fileName=path.substring(index);
        System.out.println("文件名:"+fileName);
     */
        int index=path.lastIndexOf("\\");
         String fileName=path.substring(index+1);
        System.out.println("文件名："+fileName);
      /*

        String []arr=path.split("\\\\");////涉及正则表达式
        System.out.println("文件名："+arr[arr.length-1]);
    */
    }


   //需求一
    public static String myTrim(String str){
        //转换为字符数组
       char []arr= str.toCharArray();
        //定义两个变量记录开始的索引值与结束的索引值
        int startIndex= 0;
        int endIndex=arr.length-1;
        while(true) {
            if (arr[startIndex] == ' ') {
                startIndex++;
            } else {
                break;
            }
        }
            //确定结束的索引值
        while(true){
               if(arr[endIndex]==' '){
                   endIndex--;
            }else{
                break;
               }
        }
        //截取子串返回
      return  str.substring(startIndex,endIndex+1);

    }
}

package cn.itcast.object;

import java.util.Arrays;

//定义一个数组 int []arr={11,2,4,2,10,11};
//   定义一个函数清楚该数组的重复元素，返回数组存储了那些非重复的元素而且不准浪费长度
public class test {
    public static void main(String []arg){
        int []arr={11,2,4,2,10,11};
        arr=clear(arr);
       System.out.println("输出数组的元素是："+ Arrays.toString(arr));
    }

     public static int[] clear(int []arr){
             //先计算除重复元素的个数
             int count =0;
             for(int i=0;i<arr.length-1;i++){
                 for(int j=i+1;j<arr.length;j++){
                     if(arr[i]==arr[j]){
                         count++;
                         break;
                     }
                 }
             }

             int newLength = arr.length-count;
             int []newArr = new int[newLength];
             //定义一个变量记录新数组使用的索引值
             int Index=0;

             //把旧数组元素存储到新数组中，存入前判断先判断该数组元素是否存在新数组中，如果存在了
             //那么该元素就不要了
             for(int i=0;i<arr.length;i++){
                 int temp= arr[i];//取出旧数组的元素
                 boolean flag=false;//定义一个变量用于记录当前元素是否为重复元素,默认不是重复元素

                 //检查新数组是否存在取出元素
                 for(int j=0;j<newArr.length;j++) {
                     if (newArr[j] == temp) {
                         flag = true;
                         //已经存在了新数组中
                         break;
                     }
                 }
                 //不是重复元素
                 if(flag==false){
                     newArr[Index++]=temp;
                 }
             }

